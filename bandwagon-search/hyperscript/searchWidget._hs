behavior SearchWidget(value, hint)

	init
		set :lastSearchValue to ""
		set the #search-input's value to value
		set the #search-input's placeholder to hint
		focus() the #search-input
		replaceTags()
	end

	-- submit the search
	on click from #search-submit

		-- prepare the input to send to the server
		set the #search-query's value to ""
		repeat for tag in <[data-tag]/> in me
			append "#" + the tag's @data-tag + " " to the #search-query's value
		end
	
		-- special case for tag suggestions
		addSuggestion()

		-- finalize and submit
		append the #search-input's value to the #search-query's value
		send submit to #search-form
	end

	---------------------------
	-- Tags

	-- Add tags (if suggestions are visible) or submit the form
	on keyup[key=="Enter"] from #search-input
		if the #search-suggestions's *visibility is "hidden" then
			send click to the #search-submit
		else
			addSuggestion()
		end
	end

	-- Maybe add Tags
	on blur from #search-input or keyup[key==" "] from #search-input
		replaceTags()
	end

	-- remove a tag
	on keydown[key=="Backspace"] from #search-input
		if the #search-input's selectionStart > 0 then
			exit
		end

		if the #search-input's selectionEnd > 0 then
			exit
		end

		set tag to the last <[data-tag]/> in me
		if tag is not null then 
			remove the tag
		end
	end

	-- navigate tags
	on keydown[key=="ArrowLeft"] from #search-input
		if the #search-input's selectionStart > 0 then
			exit
		end

		if the #search-input's selectionEnd > 0 then
			exit
		end

		set tag to the last <[data-tag]/> in me
		if tag is not null then 
			focus() the tag
		end
	end

	---------------------------
	-- Search Suggestions

	-- show the search suggestions
	on focus from #search-input or keyup from #search-input 
		if the #search-input's value == :lastSearchValue then
			exit
		end
		set :lastSearchValue to the #search-input's value

		if the #search-input's value contains "#" then 
			trigger showSuggestions on me
		else
			hide the #search-suggestions with visibility
		end
	end

	on showSuggestions
		set parsed to parseTags(:lastSearchValue)
		set tags to parsed.tags

		if tags.length == 0 then
			set #search-suggestion-query.value to ""
		else 
			set queryString to tags[0]
			set #search-suggestion-query.value to queryString
		end

		send search to the #search-suggestions-form
		show the #search-suggestions with visibility
	end

	-- hide search suggestions
	on hideSuggestions 
		hide the #search-suggestions with visibility
	end
		
	on blur from #search-input or keyup[key=="Escape"] from #search-input
		trigger hideSuggestions
	end

	on click from #search-input
		trigger hideSuggestions
	end

	-- keyboard navigation
	on keydown[key=="ArrowDown"] from #search-input
		halt the event

		if the #search-suggestions's *visibility is "hidden" then
			trigger showSuggestions
			exit
		end

		set currentLabel to the first <div.selected /> in #search-suggestions
		
		if currentLabel is null then
			take .selected for the first <div /> in #search-suggestions
			exit
		end

		if currentLabel is the last <div /> in #search-suggestions then
			exit
		end

		take .selected for the next <div /> from currentLabel
	end

	on keydown[key=="ArrowUp"] from #search-input
		halt the event
		set currentLabel to the first <div.selected /> in #search-suggestions
		
		if currentLabel is the first <div /> in #search-suggestions then
			hide the #search-suggestions with visibility
			remove .selected from currentLabel
			exit
		end

		if currentLabel is null then
			exit
		end

		take .selected for the previous <div /> from currentLabel
	end

end
